name: Settlement Bot

on:
  schedule:
    - cron: "0,5,10,15,20,25,30,35,40,45,50,55 * * * *"
  workflow_dispatch: {}

jobs:
  run:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 4
    permissions:
      contents: read
    concurrency:
      group: settlement-bot
      cancel-in-progress: false

    steps:
      - name: Checkout backend repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # ðŸ§¹ Full cleanup: remove fsevents everywhere and rebuild a Linux-safe lockfile
      - name: Sanitize deps (remove fsevents and rebuild lockfile)
        shell: bash
        run: |
          set -euo pipefail
          echo "ðŸ”§ Cleaning up mac-only fsevents..."
          node -e '
            const fs = require("fs");
            const pkg = JSON.parse(fs.readFileSync("package.json","utf8"));
            let changed = false;
            for (const k of ["dependencies","devDependencies","optionalDependencies"]) {
              if (pkg[k] && pkg[k].fsevents) { delete pkg[k].fsevents; changed = true; }
            }
            if (changed) fs.writeFileSync("package.json", JSON.stringify(pkg,null,2));
          '
          rm -f package-lock.json
          npm install --package-lock-only --ignore-scripts --no-audit --no-fund
          echo "âœ… Lockfile regenerated cleanly without fsevents"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json

      # Cache node_modules (keyed by fresh lockfile)
      - name: Cache node_modules
        id: cache-nm
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node20-nm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node20-nm-

      - name: Install dependencies (only if cache miss)
        if: steps.cache-nm.outputs.cache-hit != 'true'
        run: npm ci --omit=optional --ignore-scripts --no-audit --no-fund

      - name: Fetch games.json from frontend (no checkout)
        env:
          TOKEN: ${{ secrets.FRONTEND_READ_TOKEN || github.token }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ./frontend-src/src/data
          OWNER="harrisonschultz7"
          REPO="blockpools-frontend"
          REF="main"
          FILE_PATH="src/data/games.json"
          RAW_URL="https://raw.githubusercontent.com/${OWNER}/${REPO}/${REF}/${FILE_PATH}"
          curl -sSfL -H "Authorization: Bearer ${TOKEN}" "${RAW_URL}" -o ./frontend-src/src/data/games.json
          echo "Fetched games.json -> ./frontend-src/src/data/games.json"

      - name: Stagger start slightly
        run: sleep 3

      - name: Run settlement bot (send on-chain)
        env:
          RPC_URL: ${{ secrets.SEPOLIA_RPC_URL }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
          FUNCTIONS_GAS_LIMIT: "300000"
          DON_SECRETS_SLOT: "0"
          GITHUB_OWNER: "harrisonschultz7"
          GITHUB_REPO: "blockpools-backend"
          GITHUB_REF: "main"
          GH_PAT: ${{ secrets.GH_PAT }}
          THESPORTSDB_API_KEY: ${{ secrets.THESPORTSDB_API_KEY }}
          DRY_RUN: "0"
          READ_CONCURRENCY: "50"
          TSDB_CONCURRENCY: "8"
          TX_SIM_CONCURRENCY: "20"
          TX_SEND_CONCURRENCY: "3"
          MAX_TX_PER_RUN: "8"
          REQUEST_GAP_SECONDS: "180"
          REQUIRE_FINAL_CHECK: "1"
          POSTGAME_MIN_ELAPSED: "600"
          REQUEST_DELAY_MS: "0"
          GAMES_PATH: ${{ github.workspace }}/frontend-src/src/data/games.json
        run: npx tsx bots/settlement-bot.ts
