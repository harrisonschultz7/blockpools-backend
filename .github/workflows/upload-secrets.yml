name: upload-and-settle

on:
  schedule:
    - cron: "*/10 * * * *"   # every 10 minutes (UTC)
  workflow_dispatch:

permissions:
  contents: write

# Avoid overlapping 10-minute runs
concurrency:
  group: don-secrets-upload
  cancel-in-progress: true

jobs:
  upload_secrets:
    name: Upload DON secrets
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .github/secrets-uploader

    # Expose the fresh secretsVersion to downstream jobs
    outputs:
      secrets_version: ${{ steps.extract.outputs.secrets_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Cache only the uploader's deps
      - name: Cache node_modules (uploader only)
        uses: actions/cache@v4
        with:
          path: .github/secrets-uploader/node_modules
          key: ${{ runner.os }}-node20-uploader-${{ hashFiles('.github/secrets-uploader/package-lock.json', '.github/secrets-uploader/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node20-uploader-

      - name: Install deps (tiny uploader)
        run: |
          if [ ! -d node_modules ]; then
            if [ -f package-lock.json ]; then
              npm ci --omit=optional --no-audit --no-fund
            else
              npm install --omit=optional --no-audit --no-fund
            fi
          fi

      - name: Show toolkit version
        run: node -p "require('@chainlink/functions-toolkit/package.json').version"

      - name: Report available *_API_KEY secrets
        env:
          MLB_API_KEY: ${{ secrets.MLB_API_KEY }}
          NFL_API_KEY: ${{ secrets.NFL_API_KEY }}
          NBA_API_KEY: ${{ secrets.NBA_API_KEY }}
          NHL_API_KEY: ${{ secrets.NHL_API_KEY }}
          EPL_API_KEY: ${{ secrets.EPL_API_KEY }}
          UCL_API_KEY: ${{ secrets.UCL_API_KEY }}
          THESPORTSDB_API_KEY: ${{ secrets.THESPORTSDB_API_KEY }}
        run: |
          for K in MLB_API_KEY NFL_API_KEY NBA_API_KEY NHL_API_KEY EPL_API_KEY UCL_API_KEY THESPORTSDB_API_KEY; do
            if [ -n "${!K}" ]; then
              echo "✓ $K is set"
            else
              echo "• $K is NOT set (skipping)"
            fi
          done

      - name: Upload DON secrets (from GH Actions secrets)
        env:
          # signer & RPC
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          SEPOLIA_RPC_URL: ${{ secrets.SEPOLIA_RPC_URL }}
          ARBITRUM_SEPOLIA_RPC_URL: ${{ secrets.ARBITRUM_SEPOLIA_RPC_URL }}

          # IMPORTANT: Slot must match what your bot/contracts expect
          SLOT_ID: 0
          DON_TTL_MINUTES: 1440

          # League API keys (all passed through)
          MLB_API_KEY: ${{ secrets.MLB_API_KEY }}
          NFL_API_KEY: ${{ secrets.NFL_API_KEY }}
          NBA_API_KEY: ${{ secrets.NBA_API_KEY }}
          NHL_API_KEY: ${{ secrets.NHL_API_KEY }}
          EPL_API_KEY: ${{ secrets.EPL_API_KEY }}
          UCL_API_KEY: ${{ secrets.UCL_API_KEY }}
          THESPORTSDB_API_KEY: ${{ secrets.THESPORTSDB_API_KEY }}

          # Optional endpoints
          MLB_ENDPOINT: ${{ secrets.MLB_ENDPOINT }}
          NFL_ENDPOINT: ${{ secrets.NFL_ENDPOINT }}
          NBA_ENDPOINT: ${{ secrets.NBA_ENDPOINT }}
          NHL_ENDPOINT: ${{ secrets.NHL_ENDPOINT }}
          EPL_ENDPOINT: ${{ secrets.EPL_ENDPOINT }}
          UCL_ENDPOINT: ${{ secrets.UCL_ENDPOINT }}
        run: |
          echo "Upload step sees these *_API_KEY envs:"
          for K in MLB_API_KEY NFL_API_KEY NBA_API_KEY NHL_API_KEY EPL_API_KEY UCL_API_KEY THESPORTSDB_API_KEY; do
            if [ -n "${!K}" ]; then echo "✓ $K present"; else echo "• $K MISSING"; fi
          done
          npm run upload

      - name: Show activeSecrets.json (repo root)
        run: cat ../../activeSecrets.json

      - name: Commit and push updated activeSecrets.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: ${{ github.ref_name }}
          REPO: ${{ github.repository }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ../../activeSecrets.json
          git commit -m "Update activeSecrets.json [skip ci]" || true
          git push "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}.git" "HEAD:${BRANCH}"

      - name: Extract secretsVersion
        id: extract
        run: |
          sudo apt-get update -y >/dev/null 2>&1 || true
          sudo apt-get install -y jq >/dev/null 2>&1 || true
          VER=$(jq -r '.secretsVersion' ../../activeSecrets.json)
          if [ -z "$VER" ] || [ "$VER" = "null" ]; then
            echo "Could not read secretsVersion from activeSecrets.json"; exit 1
          fi
          echo "secrets_version=$VER" >> "$GITHUB_OUTPUT"
          echo "Fresh secretsVersion: $VER"

  run_bot:
    name: Run settlement bot with fresh secrets
    runs-on: ubuntu-latest
    needs: upload_secrets
    env:
      DON_SECRETS_VERSION: ${{ needs.upload_secrets.outputs.secrets_version }}
      # Add your existing env here (examples):
      FUNC_SUB_ID: ${{ secrets.FUNC_SUB_ID }}
      PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
      SEPOLIA_RPC_URL: ${{ secrets.SEPOLIA_RPC_URL }}
      ARBITRUM_SEPOLIA_RPC_URL: ${{ secrets.ARBITRUM_SEPOLIA_RPC_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps (repo root)
        run: |
          if [ -f package-lock.json ]; then
            npm ci --no-audit --no-fund
          elif [ -f pnpm-lock.yaml ]; then
            corepack enable
            pnpm i --frozen-lockfile
          else
            npm i --no-audit --no-fund
          fi

      # Safety check: ensure the repo’s pointer matches the env version
      - name: Verify secretsVersion matches env
        run: |
          sudo apt-get update -y >/dev/null 2>&1 || true
          sudo apt-get install -y jq >/dev/null 2>&1 || true
          FILE_VER=$(jq -r '.secretsVersion' activeSecrets.json)
          echo "Env DON_SECRETS_VERSION=$DON_SECRETS_VERSION ; File secretsVersion=$FILE_VER"
          if [ "$DON_SECRETS_VERSION" != "$FILE_VER" ]; then
            echo "Mismatch between env and file pointer. Aborting to avoid stale secrets."
            exit 1
          fi

      - name: Run settlement bot
        run: |
          echo "Using DON_SECRETS_VERSION=$DON_SECRETS_VERSION"
          npx tsx bots/settlement-bot.ts
